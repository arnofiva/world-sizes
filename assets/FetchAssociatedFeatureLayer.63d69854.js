import{t as o,r as m,br as c,kK as p,bA as h,dv as y,bq as g,bs as I}from"./vendor.f59113c8.js";class v{constructor(r,t,e,a){this.parsedUrl=r,this.portalItem=t,this.apiKey=e,this.signal=a,this.rootDocument=null;const s=this.parsedUrl.path.match(/^(.*)\/SceneServer\/layers\/([\d]*)\/?$/i);s&&(this.urlParts={root:s[1],layerId:parseInt(s[2],10)})}async fetch(){var r;if(!this.urlParts)return null;const t=(r=this.portalItem)!=null?r:await this._portalItemFromServiceItemId();if(o(t))return this._loadFromUrl();const e=await this._findAndLoadRelatedPortalItem(t);return o(e)?null:this._loadFeatureLayerFromPortalItem(e)}async fetchPortalItem(){var r;if(!this.urlParts)return null;const t=(r=this.portalItem)!=null?r:await this._portalItemFromServiceItemId();return o(t)?null:this._findAndLoadRelatedPortalItem(t)}async _fetchRootDocument(){if(m(this.rootDocument))return this.rootDocument;if(o(this.urlParts))return this.rootDocument={},{};const r={query:{f:"json",token:this.apiKey},responseType:"json",signal:this.signal},t=`${this.urlParts.root}/SceneServer`;try{const e=await c(t,r);this.rootDocument=e.data}catch{this.rootDocument={}}return this.rootDocument}async _fetchServiceOwningPortalUrl(){var r;const t=(r=p)==null?void 0:r.findServerInfo(this.parsedUrl.path);if(t!=null&&t.owningSystemUrl)return t.owningSystemUrl;const e=this.parsedUrl.path.replace(/(.*\/rest)\/.*/i,"$1")+"/info";try{const a=(await c(e,{query:{f:"json"},responseType:"json",signal:this.signal})).data.owningSystemUrl;if(a)return a}catch(a){h(a)}return null}async _findAndLoadRelatedPortalItem(r){try{return(await r.fetchRelatedItems({relationshipType:"Service2Service",direction:"reverse"},{signal:this.signal})).find(t=>t.type==="Feature Service")||null}catch(t){return h(t),null}}async _loadFeatureLayerFromPortalItem(r){await r.load({signal:this.signal});const t=await this._findMatchingAssociatedSublayerUrl(r.url);return new y({url:t,portalItem:r}).load({signal:this.signal})}async _loadFromUrl(){const r=await this._findMatchingAssociatedSublayerUrl(`${this.urlParts.root}/FeatureServer`);return new y({url:r}).load({signal:this.signal})}async _findMatchingAssociatedSublayerUrl(r){const t=r.replace(/^(.*FeatureServer)(\/[\d]*\/?)?$/i,"$1"),e={query:{f:"json"},responseType:"json",authMode:"no-prompt",signal:this.signal},a=this.urlParts.layerId,s=this._fetchRootDocument(),f=c(t,e),[u,d]=await Promise.all([f,s]),l=d&&d.layers,n=u.data&&u.data.layers;if(!Array.isArray(n))throw new Error("expected layers array");if(Array.isArray(l)){for(let i=0;i<Math.min(l.length,n.length);i++)if(l[i].id===a)return`${t}/${n[i].id}`}else if(a<n.length)return`${t}/${n[a].id}`;throw new Error("could not find matching associated sublayer")}async _portalItemFromServiceItemId(){const r=(await this._fetchRootDocument()).serviceItemId;if(!r)return null;const t=new g({id:r,apiKey:this.apiKey}),e=await this._fetchServiceOwningPortalUrl();m(e)&&(t.portal=new I({url:e}));try{return t.load({signal:this.signal})}catch(a){return h(a),null}}}export{v as l};
