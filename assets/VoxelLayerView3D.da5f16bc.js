import{bE as g,bF as x,L as t,hs as _,f0 as b,r as c,ht as a,aA as L,a as l,d as p,n as I}from"./vendor.f59113c8.js";let i=class extends g(x){constructor(){super(...arguments),this._usedMemory=0,this._futureMemory=0,this.type="voxel-3d",this._wasmLayerId=-1}initialize(){var r;if(this.view.viewingMode!=="local")throw new t("voxel:unsupported-viewingMode","Voxel layers support local viewingMode only.",{});if(this.view._stage.renderView.renderingContext.type!==_.WEBGL2)throw new t("voxel:unsupported-context","Voxel layers are supported in WebGL2 rendering contexts only.",{});if((r=this.view._stage.renderView.renderingContext.capabilities.colorBufferFloat)==null||!r.textureFloat)throw new t("voxel:missing-color-buffer-float","Voxel layers require the WebGL2 extension EXT_color_buffer_float",{});const m=this.layer.spatialReference;if(!b(m,this.view.spatialReference))throw new t("layerview:spatial-reference-incompatible","The spatial reference of this scene layer is incompatible with the spatial reference of the view",{});const d=this.layer.style.currentVariableId,s=this.layer.getVolume(d),h=this.layer.getVariable(d);if(c(s)&&c(h)){const e=s.dimensions[0],n=s.dimensions[1],y=s.getZDimension();if(y>1){const w=s.dimensions[y],v=e.size*n.size*w.size;let o=1;switch(h.renderingFormat.type){case"Int16":case"UInt16":o=2;break;case"Int32":case"UInt32":case"Float32":o=4}this._futureMemory=o*v}}const u=a.getInstance(),f=u.addLayer(this.view,this).then(e=>{this._wasmLayerId=e,this._suspendedHandle=L(this,"suspended",n=>{a.getInstance().setLayerEnabled(this.view,this,!n)})}).catch(e=>{if(u.removeLayer(this.view,this),this._wasmLayerId=-1,e===-1)throw new t("voxel:addLayer-failure","The voxel layer description was invalid.",{});if(e===-2)throw new t("voxel:addLayer-failure","The voxel layer web assembly module failed to download.",{})});this.addResolvingPromise(f)}destroy(){a.getInstance().removeLayer(this.view,this),this._suspendedHandle&&(this._suspendedHandle.remove(),this._suspendedHandle=null)}isUpdating(){return!(this._wasmLayerId<0)&&a.getInstance().isUpdating(this.view,this._wasmLayerId)}updatingFlagChanged(){this.notifyChange("updating")}getUsedMemory(){return this._usedMemory}getUnloadedMemory(){return this._futureMemory}ignoresMemoryFactor(){return!0}get performanceInfo(){return{nodes:0,displayedNumberOfFeatures:0,maximumNumberOfFeatures:0,totalNumberOfFeatures:0,core:null}}setUsedMemory(r){this._usedMemory=r,this._futureMemory=0}};l([p()],i.prototype,"layer",void 0),l([p({readOnly:!0,aliasOf:"layer.parsedUrl.path"})],i.prototype,"baseUrl",void 0),i=l([I("esri.views.3d.layers.VoxelLayerView3D")],i);const F=i;export{F as default};
